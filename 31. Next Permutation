class Solution {
    public void nextPermutation(int[] nums)
     {
         int i = nums.length - 2;
        
        while (i >= 0 && nums[i] >= nums[i + 1])             // Step 1: Find the first decreasing element from the end
         {
            i--;
         }
        
                                                               
        if (i >= 0)                                        // If such element was found 
        {
            int j = nums.length - 1;
                                                           
            while (j >= 0 && nums[j] <= nums[i])            // Step 2: Find the element to swap with
              {
                j--;
              }
            // Step 3: Swap the elements
            swap(nums, i, j);
        }
        
        // Step 4: Reverse the subarray to get the next permutation
        reverse(nums, i + 1);
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private void reverse(int[] nums, int start) {
        int end = nums.length - 1;
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
        
    }
}
