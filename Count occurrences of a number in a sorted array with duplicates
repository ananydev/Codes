
class Solution 
{
    int count(int[] nums, int n, int target)
    {
        int left = findLeftBound(nums, n, target);
        int right = findRightBound(nums, n, target);

        // If the target is not found, left and right will be -1
        if (left == -1 || right == -1) 
        {
            return 0;
        }

        return right - left + 1;
    }

    private int findLeftBound(int[] nums, int n, int target) 
    {
        int index = -1, low = 0, high = n - 1;

        // Standard binary search
        while (low <= high) 
        {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target)
            {
                index = mid;
                high = mid - 1; // Look in the left sub-array
            } 
            else if (nums[mid] < target) 
            {
                low = mid + 1;
            } 
            else
            {
                high = mid - 1;
            }
        }

        return index;
    }

    private int findRightBound(int[] nums, int n, int target) {
        int index = -1, low = 0, high = n - 1;

        // Standard binary search
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                index = mid;
                low = mid + 1; // Look in the right sub-array
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return index;
    }
}
